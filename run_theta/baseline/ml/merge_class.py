import numpy as np

X_tetragonal = np.load('../Data/IEEEBigdata/train/tetragonal/tetragonal-Y.npy')
X_trigonal = np.load('../Data/IEEEBigdata/train/trigonal/trigonal-Y.npy')
X_cubic = np.load('../Data/IEEEBigdata/train/cubic/cubic-Y.npy')
y_tetragonal = np.load('../Data/IEEEBigdata/train/tetragonal/tetragonal-P.npy')
y_trigonal = np.load('../Data/IEEEBigdata/train/trigonal/trigonal-P.npy')
y_cubic = np.load('../Data/IEEEBigdata/train/cubic/cubic-P.npy')
print(X_tetragonal.shape,X_trigonal.shape,X_cubic.shape,y_tetragonal.shape,y_trigonal.shape, y_cubic.shape)

y_trigonal=np.float32(y_trigonal)
y_tetragonal = np.float32(y_tetragonal)
y_cubic = np.float32(y_cubic)
temp_y = np.array([1, 0, 0])
temp_y = np.tile(temp_y, (y_trigonal.shape[0],1))
y_trigonal[:,1]=np.deg2rad(y_trigonal[:,1])
y_trigonal = dup_cols(y_trigonal, 0)
y_trigonal_all = np.concatenate((y_trigonal,temp_y),axis=1)
print(y_trigonal_all.shape)
temp_y = np.array([0, 1, 0])
temp_y = np.tile(temp_y, (y_tetragonal.shape[0],1))
temp_angle = np.ones((y_tetragonal.shape[0],1))*1.5708
y_tetragonal_all = np.concatenate((y_tetragonal,temp_angle, temp_y),axis=1)
print(y_tetragonal_all.shape)
temp_y = np.array([0, 0, 1])
temp_y = np.tile(temp_y, (y_cubic.shape[0],1))
temp_angle = np.ones((y_cubic.shape[0],1))*1.5708
y_cubic = dup_cols(y_cubic,0)
y_cubic_all = np.concatenate((y_cubic,temp_angle, temp_y), axis=1)
y_cubic_all = np.tile(y_cubic_all,(int(np.round(y_trigonal.shape[0]/y_cubic_all.shape[0])),1))
X_cubic = np.tile(X_cubic,(int(np.round(X_trigonal.shape[0]/X_cubic.shape[0])),1))
print(X_cubic.shape)
print(y_cubic_all.shape)
X_scaled = np.concatenate((X_trigonal,X_tetragonal,X_cubic),axis=0)
y_scaled = np.concatenate((y_trigonal_all,y_tetragonal_all,y_cubic_all),axis=0)
y_scaled = np.float32(y_scaled)
print(X_scaled.shape,y_scaled.shape)
